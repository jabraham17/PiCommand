
//plugins
plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'eclipse'
    id "com.google.protobuf" version "0.8.3"
    id 'org.hidetake.ssh' version '2.9.0'
}


// In this section you declare where to find the dependencies of your project
repositories {
    //jcenter()
    mavenCentral()
}

dependencies {
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.1'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    // Use JUnit test framework
    //testCompile 'junit:junit:4.12'
}

protobuf {
    //config compiler
    protoc {
        artifact = 'com.google.protobuf:protoc:3.5.1'
    }
    //put it in sources direcrory
    generateProtoTasks.generatedFilesBaseDir = 'generated'
}

// Define the main class for the application
mainClassName = 'Main'
def projectName = rootProject.name

jar {
    manifest {
        attributes 'Main-Class': "main.${mainClassName}"
    }
    baseName = projectName
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

def outputDirectory = file("${rootDir}/output")

//make run script executable
task runScript(type: Exec) {
    commandLine 'chmod', '+x', 'scripts/PiCommand'
}
task zipOutput(type: Zip) {
    dependsOn jar
    dependsOn runScript
    baseName = projectName
    duplicatesStrategy = 'exclude'
    destinationDir = outputDirectory
    from(file(jar.archivePath)) {}
    from(file("scripts/PiCommand")) {}
}

task unzipOutput(type: Exec) {
    dependsOn zipOutput
    commandLine "unzip", '-fo', "${outputDirectory}/${projectName}.zip", '-d', "${outputDirectory}/"
}

clean {
    delete outputDirectory
    delete "generated"
}
build {
    dependsOn unzipOutput

}

remotes {
    pi {
        host = '192.168.10.60'
        user = 'pi'
        password = 'eatsomepi'
    }
}


ssh.settings {
    knownHosts = allowAnyHosts
}

task remoteClean {
    doLast {
        ssh.run {
            session(remotes.pi) {
                def contents = "${projectName}/*"
                def execCMD = "rm ${contents}"
                def result = execute execCMD
            }
        }
    }

}

task deploy {
    dependsOn build
    doLast {
        ssh.run {
            session(remotes.pi) {

                def file = new File("${projectName}/${projectName}.zip")

                put from: "${outputDirectory}/${projectName}.zip", into: file.path

                def zipLoc = file.path
                def execCMD = "unzip ${zipLoc} -d ${projectName}/"
                def result = execute execCMD
                println result
            }
        }
    }
}


